// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: spike_service.proto

package spike_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpikeServiceClient is the client API for SpikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpikeServiceClient interface {
	SendRedPack(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	RecvRedPack(ctx context.Context, in *RecvRequest, opts ...grpc.CallOption) (*RecvResponse, error)
	ListRedPack(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type spikeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpikeServiceClient(cc grpc.ClientConnInterface) SpikeServiceClient {
	return &spikeServiceClient{cc}
}

func (c *spikeServiceClient) SendRedPack(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/spike.service.v1.SpikeService/SendRedPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spikeServiceClient) RecvRedPack(ctx context.Context, in *RecvRequest, opts ...grpc.CallOption) (*RecvResponse, error) {
	out := new(RecvResponse)
	err := c.cc.Invoke(ctx, "/spike.service.v1.SpikeService/RecvRedPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spikeServiceClient) ListRedPack(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/spike.service.v1.SpikeService/ListRedPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpikeServiceServer is the server API for SpikeService service.
// All implementations must embed UnimplementedSpikeServiceServer
// for forward compatibility
type SpikeServiceServer interface {
	SendRedPack(context.Context, *SendRequest) (*SendResponse, error)
	RecvRedPack(context.Context, *RecvRequest) (*RecvResponse, error)
	ListRedPack(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedSpikeServiceServer()
}

// UnimplementedSpikeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpikeServiceServer struct {
}

func (UnimplementedSpikeServiceServer) SendRedPack(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRedPack not implemented")
}
func (UnimplementedSpikeServiceServer) RecvRedPack(context.Context, *RecvRequest) (*RecvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvRedPack not implemented")
}
func (UnimplementedSpikeServiceServer) ListRedPack(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRedPack not implemented")
}
func (UnimplementedSpikeServiceServer) mustEmbedUnimplementedSpikeServiceServer() {}

// UnsafeSpikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpikeServiceServer will
// result in compilation errors.
type UnsafeSpikeServiceServer interface {
	mustEmbedUnimplementedSpikeServiceServer()
}

func RegisterSpikeServiceServer(s grpc.ServiceRegistrar, srv SpikeServiceServer) {
	s.RegisterService(&SpikeService_ServiceDesc, srv)
}

func _SpikeService_SendRedPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpikeServiceServer).SendRedPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spike.service.v1.SpikeService/SendRedPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpikeServiceServer).SendRedPack(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpikeService_RecvRedPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpikeServiceServer).RecvRedPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spike.service.v1.SpikeService/RecvRedPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpikeServiceServer).RecvRedPack(ctx, req.(*RecvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpikeService_ListRedPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpikeServiceServer).ListRedPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spike.service.v1.SpikeService/ListRedPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpikeServiceServer).ListRedPack(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpikeService_ServiceDesc is the grpc.ServiceDesc for SpikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spike.service.v1.SpikeService",
	HandlerType: (*SpikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRedPack",
			Handler:    _SpikeService_SendRedPack_Handler,
		},
		{
			MethodName: "RecvRedPack",
			Handler:    _SpikeService_RecvRedPack_Handler,
		},
		{
			MethodName: "ListRedPack",
			Handler:    _SpikeService_ListRedPack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spike_service.proto",
}
